<% @time_slots_array = [] %>

<% @time_slots.each do |slot| %>
  <%#= slot.start_time.strftime("%b %e, %l:%M %p") %>
  <%#= slot.start_time.iso8601 %>
  <% @time_slots_array << slot.start_time.iso8601 %>
<% end %>

<input id="begin-date" type="hidden" value="<%= @time_slots.first.start_time %>">
<input id="end-date" type="hidden" value="<%= @time_slots.last.start_time %>">
<input id="inferred-timezone" type="hidden" value="">
<input id="received-time-slots" type="hidden" value="<%= @time_slots_array.to_s %>">


<div class="time-slot-show">
<%= link_to "Accept", dashboard_path, :class => "btn btn-primary btn-md" %>
  <div id="calendar"></div>
</div>

<script>
  function drawCalendar() {
    calendar.innerHTML = "";
    dateInfo();
    fillDays();
    timeSlotCompare();
  }
  
  const receivedTimeSlots = document.querySelector("#received-time-slots");
  const inferredTimezone = document.querySelector("#inferred-timezone");
  const beginDateInput = document.querySelector("#begin-date");
  const endDateInput = document.querySelector("#end-date");
  const calendar = document.querySelector("#calendar")
  
  function dateInfo() {
    date1 = new Date(beginDateInput.value);
    date2 = new Date(endDateInput.value);
    difference = Math.ceil((date2 - date1) / 1000 / 60 / 60 / 24);
    console.log("Begin date:", date1)
    console.log("End date:", date2)
    console.log("Days total:", difference)
  }
  
  function timeSlotCompare() {
    let aa = receivedTimeSlots.value

    let bb = aa.replaceAll(/"/g, '');

    let cc = bb.substring(1).slice(0,-1)

    let dd = cc.replaceAll(/\.000/g, '')


    let ee = dd.split(", ")

    return ee
  }



  function fillDays() {
    for (let c = 0; c <= difference; c++) {
      let options = {
        weekday: "long",
        month: "short",
        day: "numeric",
        timeZone: `${inferredTimezone.value}`,
      };
      let cell = document.createElement("div");
      cell.innerText = date1.toLocaleString(getLang(), options);
      calendar.appendChild(cell).className = "grid-header";
      // Fill hour info for each day
      fillHours(date1);
      // Advance onto next day
      date1.setDate(date1.getDate() + 1);
    }
  }
  
  function fillHours(date) {
    let timeslotarray = timeSlotCompare();

    for (let i = 0; i < 24; i++) {
      let cell = document.createElement("div");
      if (i < 10) {
        cell.innerText = "0" + i + ":00";
      } else {
        cell.innerText = i + ":00";
      }
      cell.style.gridRow = i + 2;
      calendar.appendChild(cell);
      cell.className = "grid-item";

      // increment hours
      let timeslot = new Date(date.setHours(i));
      console.log(timeslot)

      // Format time for UTC through chosen locale
      const x = timeslot.toLocaleString("en-US", {
        timeZone: inferredTimezone.value,
        timeZoneName: "short",
      });

      let dateString = new Date(x);

      // Set cell id with hour-date info
      cell.dataset.date = `${dateString.toISOString()}`;

    }
  }
  
  const getLang = () =>
    navigator.language ||
    navigator.browserLanguage ||
    (navigator.languages || ["en"])[0];

  function inferUserTimezone() {
    inferredTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;
  }
  
  inferUserTimezone();
  drawCalendar();
</script>
