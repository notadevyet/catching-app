<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nice-select2@1/dist/css/nice-select2.min.css"/>
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/moment-timezone@0.5.33/builds/moment-timezone-with-data-10-year-range.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/nice-select2@1/dist/js/nice-select2.min.js"></script>

<% @time_slots_array = [] %>

<% @time_slots.each do |slot| %>
  <% @time_slots_array << slot.start_time.iso8601 %>
<% end %>

<input id="begin-date" type="hidden" value="<%= @time_slots.first.start_time.iso8601 %>">
<input id="end-date" type="hidden" value="<%= @time_slots.last.start_time.iso8601 %>">
<input id="received-time-slots" type="hidden" value="<%= @time_slots_array.to_s %>">

<div class="timezone-picker">
  <label for="timezones">I am in:&nbsp&nbsp</label>
  <select id="timezones"></select>
</div>

<div class="time-slot-show">
  <div id="calendar"></div>
</div>

<script>
  const receivedTimeSlots = document.querySelector("#received-time-slots");
  const beginDateInput = document.querySelector("#begin-date");
  const endDateInput = document.querySelector("#end-date");
  const calendar = document.querySelector("#calendar")
  const tzpicker = document.querySelector("#timezones")
  const tzones = moment.tz.names();
  const slots_array = isoToMoment();
  const btn = document.getElementById("myBtn")
  tzpicker.onchange = changeTimezone

  let allHours

  function changeTimezone() {
    console.log("Button Clicked")
    moment.tz.setDefault(tzpicker.value);
    drawCalendar();
  }


  tzones.forEach((tzone) => {
    if (tzone == moment.tz.guess()) {
      tzpicker.innerHTML += `<option value="${tzone}" selected>${tzone}</option>`
    } else {
      tzpicker.innerHTML += `<option value="${tzone}">${tzone}</option>`
    }
  });
  
  NiceSelect.bind(tzpicker, { searchable: true});

  function drawCalendar() {
    calendar.innerHTML = "";
    dateInfo();
    allHours = new Array();
    fillDays();
  }

  function dateInfo() {

    receivedDate1 = moment.min(slots_array)
    date1 = moment(receivedDate1).startOf('day');
    
    receivedDate2 = moment.max(slots_array)
    date2 = moment(receivedDate2).startOf('day');

    difference = date2.diff(date1, 'days')

    console.log("Days total:", difference)
  }

  function isoToMoment() {
    const iso_regex = (/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)*/g);
    let array = receivedTimeSlots.value.match(iso_regex);
    return array.map(slot => moment(slot));
  }

  function fillDays() {
    for (let c = 0; c <= difference; c++) {

      let cell = document.createElement("div");
      cell.innerText = moment(date1).format("MMM Do, ddd"); 
      calendar.appendChild(cell).className = "grid-header";
      
      // Fill hour info for each day
      fillHours(date1);

      // Advance onto next day
      date1 = moment(date1).add(1, "day")
    }
  }

  function fillHours(date) {

    for (let i = 0; i < 24; i++) {
      // Create grid cells
      let cell = document.createElement("div");
      cell.innerText = moment(date).format("HH:mm");
      cell.style.gridRow = i + 2;
      calendar.appendChild(cell);
      cell.className = "grid-item";
      cell.dataset.date = moment(date).toISOString();
      allHours.push(date);
      // Increment hour
      date = moment(date).add(1, 'hour');
    }
  }


   // Make cells listen for mouseover
  function highlightCell(event) {
    let greenCells = document.querySelectorAll(".active");
    let allCells = document.querySelectorAll(".grid-item");

      if (event.target.classList.contains("active")) {
        greenCells.forEach((element) => {
          element.addEventListener("mouseover", removeSlots);
        });
      } else {
        allCells.forEach((element) => {
          element.addEventListener("mouseover", addSlots);
        });
      }
    }

  // Actual highlighting and removing
  function addSlots(event) {
    if (!event.target.classList.value.includes("active")) {
      event.target.classList.toggle("active");
    }
  }

  function removeSlots(event) {
    if (event.target.classList.contains("active")) {
      event.target.classList.toggle("active");
    }
  }

  function toggleActive(event) {
    if (event.target.classList.contains("grid-item")) {
      event.target.classList.toggle("active");
    }
  }

  // Stop cells listening for mouseover
  function resetListeners() {
    let hourInputs = document.querySelectorAll(".grid-item");
    hourInputs.forEach((element) => {
      element.removeEventListener("mouseover", toggleActive);
      element.removeEventListener("mouseover", addSlots);
      element.removeEventListener("mouseover", removeSlots);
    });
    getActiveCells();
  }

  const getLang = () =>
    navigator.language ||
    navigator.browserLanguage ||
    (navigator.languages || ["en"])[0];

  drawCalendar();

  calendar.addEventListener("mousedown", highlightCell);
  calendar.addEventListener("mousedown", toggleActive);
  calendar.addEventListener("mouseup", resetListeners);

</script>
